<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <groupId>ch.graueenergie.energieclash</groupId>
    <artifactId>energieclash</artifactId>
    <name>EnergieClash</name>
    <description>EnergieClash Game.</description>
    <version>0.0.1</version>

    <repositories>
        <repository>
            <id>oss.sonatype.org-snapshot</id>
            <url>https://oss.sonatype.org/content/repositories/snapshots</url>
            <releases>
                <enabled>false</enabled>
            </releases>
            <snapshots>
                <enabled>true</enabled>
            </snapshots>
        </repository>
    </repositories>

    <!-- BUILD PROPERTIES -->
    <properties>
        <!-- The class that will be started, choose one and only one -->

        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.setup.HelloFX</launcher.class> -->
        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.setup.MinimalPi4J</launcher.class> -->
        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.mvc.templateapp.AppStarter</launcher.class> -->
        <!-- <launcher.class>com.pi4j.mvc/com.pi4j.mvc.templatepuiapp.AppStarter</launcher.class> -->
        <launcher.class>ch.graueenergie/ch.graueenergie.energieclash.controller.GameStarter</launcher.class>


        <!-- Setup for the RaspPi -->
        <pi.hostname>energieclash</pi.hostname>
        <pi.ipnumber>172.20.10.14</pi.ipnumber>  <!-- change to concrete ip-number if hostname is not unique in wlan -->
        <pi.port>22</pi.port>
        <pi.username>pi</pi.username>
        <pi.password>pi4j</pi.password>
        <pi.deploydirectory>/home/pi/deploy</pi.deploydirectory>
        <pi.jvmOptions/>

        <!-- If a mouse is attached to Pi use 'true' -->
        <pi.drm.enable.cursor>true</pi.drm.enable.cursor>

        <!-- Java Compiler Version -->
        <java.version>17</java.version>

        <!-- Project Dependency Versions-->
        <javafx.version>20.0.2</javafx.version>
        <pi4j.version>2.4.0</pi4j.version>
        <junit.version>5.10.0</junit.version>


        <!-- Plugin Versions-->
        <javafx.plugin.version>0.0.8</javafx.plugin.version>

        <!-- Maven Plugin Versions -->
        <maven-clean-plugin.version>3.3.1</maven-clean-plugin.version>
        <maven-compiler-plugin.version>3.11.0</maven-compiler-plugin.version>
        <maven-dependency-plugin.version>3.6.1</maven-dependency-plugin.version>
        <exec-maven-plugin.version>3.1.0</exec-maven-plugin.version>
        <maven-install-plugin.version>3.1.1</maven-install-plugin.version>
        <maven-jar-plugin.version>3.3.0</maven-jar-plugin.version>
        <maven-javadoc-plugin.version>3.6.0</maven-javadoc-plugin.version>
        <maven-resources-plugin.version>3.3.1</maven-resources-plugin.version>
        <maven-surefire-plugin.version>3.2.1</maven-surefire-plugin.version>
        <maven-antrun-plugin.version>3.1.0</maven-antrun-plugin.version>
        <maven-checkstyle-plugin.version>3.3.1</maven-checkstyle-plugin.version>

        <!-- Maven Properties -->
        <maven.compiler.source>${java.version}</maven.compiler.source>
        <maven.compiler.target>${java.version}</maven.compiler.target>

        <!-- PROJECT ENCODING PROPERTIES -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>

        <!-- Ant Dependencies -->
        <ant-jsch.version>1.10.14</ant-jsch.version>
    </properties>

    <dependencies>
        <!-- Mockito for Test-Suite-->
        <dependency>
            <groupId>org.mockito</groupId>
            <artifactId>mockito-core</artifactId>
            <version>4.8.0</version>
            <scope>test</scope>
        </dependency>

        <!-- JavaFX  -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-base</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-graphics</artifactId>
            <version>${javafx.version}</version>
        </dependency>
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-controls</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!--fxml JavaFX added by Robin -->
        <dependency>
            <groupId>org.openjfx</groupId>
            <artifactId>javafx-fxml</artifactId>
            <version>${javafx.version}</version>
        </dependency>

        <!-- Pi4J  -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-core</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-raspberrypi</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-pigpio</artifactId>
            <version>${pi4j.version}</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-linuxfs</artifactId>
            <version>${pi4j.version}</version>
        </dependency>

        <!-- Pi4J Mock Platform -->
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4j-plugin-mock</artifactId>
            <version>${pi4j.version}</version>
            <!-- <scope>test</scope> -->
        </dependency>

        <!-- JUnit -->
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <version>${junit.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.xerial</groupId>
            <artifactId>sqlite-jdbc</artifactId>
            <version>3.43.0.0</version>
        </dependency>
        <!--Logging -->
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-api</artifactId>
            <version>2.17.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-core</artifactId>
            <version>2.17.1</version>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.17.1</version>
        </dependency>
        <dependency>
            <groupId>com.pi4j</groupId>
            <artifactId>pi4jlib</artifactId>
            <version>1.0.0</version>
        </dependency>
    </dependencies>


    <build>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <version>4.0.0-M13</version>
            </plugin>
            <plugin>
                <groupId>org.openjfx</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <version>${javafx.plugin.version}</version>
                <configuration>
                    <mainClass>${launcher.class}</mainClass>
                </configuration>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>${maven-checkstyle-plugin.version}</version>
                <configuration>
                    <configLocation>/src/main/resources/checkstyle/energieclash_checks.xml</configLocation>
                    <suppressionsLocation>/src/main/resources/checkstyle/suppressions.xml</suppressionsLocation>
                    <consoleOutput>true</consoleOutput>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <violationSeverity>warning</violationSeverity>
                    <failOnViolation>false</failOnViolation>
                </configuration>
                <executions>
                    <execution>
                        <id>validate</id>
                        <phase>validate</phase>
                        <goals>
                            <goal>check</goal>
                        </goals>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>com.puppycrawl.tools</groupId>
                        <artifactId>checkstyle</artifactId>
                        <version>10.14.1</version>
                    </dependency>
                </dependencies>
            </plugin>
            <!-- JAVA COMPILER -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-compiler-plugin</artifactId>
                <version>${maven-compiler-plugin.version}</version>
                <configuration>
                    <release>${java.version}</release>
                    <showDeprecation>true</showDeprecation>
                    <showWarnings>true</showWarnings>
                    <verbose>false</verbose>
                </configuration>
            </plugin>

            <!-- DEFAULT JAR EXECUTABLE CLASS -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>exec-maven-plugin</artifactId>
                <version>${exec-maven-plugin.version}</version>
                <executions>
                    <!-- Execution for running a Java application -->
                    <execution>
                        <id>run-java-application</id>
                        <goals>
                            <goal>java</goal>
                        </goals>
                        <configuration>
                            <mainClass>${launcher.class}</mainClass>
                            <arguments>
                                <argument>--module-path</argument>
                                <argument>${project.build.directory}/distribution</argument>
                                <argument>--module</argument>
                                <argument>${launcher.class}</argument>
                            </arguments>
                        </configuration>
                    </execution>
                </executions>
            </plugin>


            <!-- Copy runtime dependencies into distribution folder -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <id>copy-dependencies</id>
                        <phase>process-sources</phase>
                        <goals>
                            <goal>copy-dependencies</goal>
                        </goals>
                        <configuration>
                            <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                            <includeScope>runtime</includeScope>
                            <excludeTransitive>false</excludeTransitive>
                            <overWriteReleases>false</overWriteReleases>
                            <overWriteSnapshots>true</overWriteSnapshots>
                            <overWriteIfNewer>true</overWriteIfNewer>
                            <!--
                            On the Raspberry Pi we use specific JavaFX dependencies, so we exclude them here.
                            -->
                            <excludeGroupIds>org.openjfx</excludeGroupIds>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- Build final JAR file -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jar-plugin</artifactId>
                <configuration>
                    <outputDirectory>${project.build.directory}/distribution</outputDirectory>
                </configuration>
            </plugin>

            <!-- Javadoc -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <configuration>
                    <additionalOptions>
                        <additionalOption>--module-path</additionalOption>
                        <additionalOption>${project.build.directory}/distribution</additionalOption>
                    </additionalOptions>
                </configuration>
            </plugin>
        </plugins>
        <pluginManagement>
            <plugins>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven-clean-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-antrun-plugin</artifactId>
                    <version>${maven-antrun-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven-compiler-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven-dependency-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-jar-plugin</artifactId>
                    <version>${maven-jar-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven-install-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-javadoc-plugin</artifactId>
                    <version>${maven-javadoc-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven-resources-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven-surefire-plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>exec-maven-plugin</artifactId>
                    <version>${exec-maven-plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
    </build>

    <profiles>
        <profile>
            <id>jfx-remote-run-kiosk</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}"
                                                 trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; rm -f ${pi.deploydirectory}/*.jar"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>/>
                                            </fileset>
                                        </scp>

                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="sudo killall -9 java"/>

                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="sudo  java-kiosk  ${pi.jvmOptions} -Xmx500M --module-path ${pi.deploydirectory} --module ${launcher.class} -Dmonocle.cursor.enabled=${pi.drm.enable.cursor}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
            <id>jfx-remote-run-X11</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Stop all running Java processes -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="false"
                                                 suppresssystemerr="true" suppresssystemout="true"
                                                 command="sudo killall -9 java"/>

                                        <!-- Ensure target directory exists on RaspPi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}"
                                                 trust="true"
                                                 command="mkdir --parents ${pi.deploydirectory}; sudo find ${pi.deploydirectory} -maxdepth 1 ! -name 'energieclash.sqlite' -type f -exec rm -rf {} +"/>

                                        <!-- Transfer distribution folder to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/distribution">
                                                <exclude name="javafx*.jar"/>/>
                                            </fileset>
                                        </scp>
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <file file="${project.build.directory}/classes/app.properties"/>
                                        </scp>
                                        <!-- Transfer autostart shellscript to RaspPi via SCP -->
                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/classes/scripts"/>
                                            <!--<file file="${project.build.directory}/classes/energieclash_autostart.sh" /> -->
                                        </scp>
                                        <!-- Run JFX application on Raspberry Pi -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="DISPLAY=:0 XAUTHORITY=/home/pi/.Xauthority sudo -E java -XX:+UseZGC -Xmx1G  ${pi.jvmOptions} --module-path /opt/javafx-sdk/lib:${pi.deploydirectory} --add-modules javafx.controls -Dglass.platform=gtk --module ${launcher.class}"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-project-info-reports-plugin</artifactId>
                        <version>3.5.0</version>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <database.path>${pi.deploydirectory}</database.path>
            </properties>
        </profile>
        <!-- Activate JDWP server on Pi, can be used for local and remote runs -->
        <profile>
            <id>debug</id>
            <properties>
                <pi.jvmOptions>
                    -agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=*:5005
                </pi.jvmOptions>
            </properties>
        </profile>

        <!-- Move DB from Project to RasPi -->
        <profile>
            <id>sqlite-db</id>
            <build>
            <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <executions>
                    <execution>
                        <id>transfer</id>
                        <phase>install</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                         username="${pi.username}" password="${pi.password}" trust="true"
                                         failonerror="false" usepty="true" useSystemIn="true"
                                         command="sudo find ${pi.deploydirectory} -type f -name '*.sqlite' -exec rm {} +"/>
                                <!-- Transfer database to RaspPi via SCP -->
                                <scp trust="true"
                                     todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                     port="${pi.port}">
                                    <file file="${project.build.directory}/classes/energieclash.sqlite"/>
                                </scp>
                            </target>
                        </configuration>
                    </execution>
                </executions>
                <dependencies>
                    <dependency>
                        <groupId>org.apache.ant</groupId>
                        <artifactId>ant-jsch</artifactId>
                        <version>${ant-jsch.version}</version>
                    </dependency>
                </dependencies>
            </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-project-info-reports-plugin</artifactId>
                    <version>3.5.0</version>
                </plugin>
            </plugins>
            </build>
            <properties>
                <database.path>${pi.deploydirectory}</database.path>
            </properties>
        </profile>

        <!-- Runs script to test LEDs on RasPi -->
        <profile>
            <id>debug-led</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Transfer shellscripts to RaspPi via SCP -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="${pi.deploydirectory} f -name &quot;*.sh&quot; -exec rm {}"/>

                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/classes/scripts"/>
                                        </scp>

                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="sudo chmod ugo+x ${pi.deploydirectory}/ledTest.sh; sudo bash ${pi.deploydirectory}/ledTest.sh"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-project-info-reports-plugin</artifactId>
                        <version>3.5.0</version>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <database.path>${pi.deploydirectory}</database.path>
            </properties>
        </profile>

        <!-- Runs script to test the i2C modules on RasPi -->
        <profile>
            <id>debug-i2c</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Transfer shellscripts to RaspPi via SCP -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="${pi.deploydirectory} f -name &quot;*.sh&quot; -exec rm {}"/>

                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/classes/scripts"/>
                                        </scp>

                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="sudo chmod ugo+x ${pi.deploydirectory}/i2cTest.sh; sudo bash ${pi.deploydirectory}/i2cTest.sh" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-project-info-reports-plugin</artifactId>
                        <version>3.5.0</version>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <database.path>${pi.deploydirectory}</database.path>
            </properties>
        </profile>

        <!-- Runs energieclash_installscript.sh to move needed scripts to correct location and enables energeieclash.service for autostart-->
        <profile>
            <id>installscript-on-Pi</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>transfer</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <!-- Transfer shellscripts to RaspPi via SCP -->
                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="${pi.deploydirectory} f -name &quot;*.sh&quot; -exec rm {}"/>

                                        <scp trust="true"
                                             todir="${pi.username}:${pi.password}@${pi.ipnumber}:${pi.deploydirectory}"
                                             port="${pi.port}">
                                            <fileset dir="${project.build.directory}/classes/scripts"/>
                                        </scp>

                                        <sshexec host="${pi.ipnumber}" port="${pi.port}"
                                                 username="${pi.username}" password="${pi.password}" trust="true"
                                                 failonerror="false" usepty="true" useSystemIn="true"
                                                 command="sudo chmod ugo+x ${pi.deploydirectory}/energieclash_installscript.sh; sudo bash ${pi.deploydirectory}/energieclash_installscript.sh"/>
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                        <dependencies>
                            <dependency>
                                <groupId>org.apache.ant</groupId>
                                <artifactId>ant-jsch</artifactId>
                                <version>${ant-jsch.version}</version>
                            </dependency>
                        </dependencies>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-project-info-reports-plugin</artifactId>
                        <version>3.5.0</version>
                    </plugin>
                </plugins>
            </build>
            <properties>
                <database.path>${pi.deploydirectory}</database.path>
            </properties>
        </profile>
    </profiles>

    <!-- Reporting Javadoc und Checkstyle-->
    <reporting>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-javadoc-plugin</artifactId>
                <version>3.6.3</version>
                <configuration>
                    <doctitle>Two Player Quiz - EnergieClash</doctitle>
                    <bottom>Copyright © 2024 BSc Computer Science - FHNW</bottom>
                    <show>protected</show>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>javadoc</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-checkstyle-plugin</artifactId>
                <version>3.3.1</version>
                <configuration>
                    <configLocation>/src/main/resources/checkstyle/energieclash_checks.xml</configLocation>
                    <suppressionsLocation>/src/main/resources/checkstyle/suppressions.xml</suppressionsLocation>
                    <consoleOutput>true</consoleOutput>
                    <includeTestSourceDirectory>true</includeTestSourceDirectory>
                    <violationSeverity>warning</violationSeverity>
                    <failOnViolation>false</failOnViolation>
                </configuration>
                <reportSets>
                    <reportSet>
                        <reports>
                            <report>checkstyle</report>
                        </reports>
                    </reportSet>
                </reportSets>
            </plugin>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-jxr-plugin</artifactId>
                <version>3.3.2</version>
            </plugin>
        </plugins>
    </reporting>

</project>
